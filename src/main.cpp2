/* lang:cpp */
// #include <iostream>
// #include <string>
// #include <variant>
// #include <any>
// #include <optional>
#include "cpp2util.h"
#include "utils.h"
#include <list>
#include <map>
/* lang:end */


main: (args) -> int =
{
    std::cout << "args.argc is (args.argc)$, and args.argv[0] is (args.argv[0])$\n";
    for args do (arg)
        print("(arg)$");
    print("Starting application..."); //, 1.1 is int );
    a := 2;
    b: std::optional<int> = ();
    std::cout << "a = (a)$, b = (b)$\n";

    b = 42;
    std::cout << "a^2 + b = (a * a + b.value())$\n";

    sv: std::string_view = "my string_view";
    std::cout << "sv = (sv)$\n";

    osv: std::optional<std::string_view> = ();
    std::cout << "osv = (osv)$\n";
    osv = "string literal bound to optional string_view";
    std::cout << "osv = (osv)$\n";

    var: std::variant<std::monostate, std::string, double> = ();
    std::cout << "var = (var)$\n";
    var = "abracadabra";
    std::cout << "var = (var)$\n";
    var = 2.71828;
    std::cout << "var = (var)$\n";

    mypair: std::pair<int, double> = (12, 3.4);
    std::cout << "mypair = (mypair)$\n";

    tup1: std::tuple<int> = (12);
    tup2: std::tuple<int, double> = (12, 3.4);
    tup3: std::tuple<int, double, std::string> = (12, 3.4, "456");
    std::cout << "tup1 = (tup1)$\n";
    std::cout << "tup2 = (tup2)$\n";
    std::cout << "tup3 = (tup3)$\n";

    p: std::pair<std::string_view, std::optional<std::string>> = ("first", std::nullopt);
    std::cout << "p = (p)$\n";

    t: std::tuple<double, std::optional<std::pair<std::string_view, int>>, std::optional<std::tuple<int, int, int>>> = (3.14, std::nullopt, std::nullopt);
    std::cout << "t = (t)$\n";

    vv: std::variant<int, std::string, std::pair<int, double> > = ();
    std::cout << "vv = (vv)$\n";
    vv = std::make_pair(1,2.3);
    std::cout << "vv = (vv)$\n";
    v: std::vector<int> = (1, 2, 3, 4, 5);
    counter := 42;
    for v  next counter *= 2  do (i) {
        std::cout << i << " " << counter << "\n";
    }

    urls : std::list<std::string> = ("abc", "def");
    for urls do (inout url){
        print("http://(url)$");
    }
    m : std::map<std::string, int> = ();
    m["one"] = 1;
    m["two"] = 2;
    // print( "1   is int? ", 1   is int );

    // c := new<Circle>();     // safe by construction
    // s : * Shape = c.get();  // safe by Lifetime
    // print("\ns* is Shape?  ", s* is Shape  );
    // print(  "s* is Circle? ", s* is Circle );
    // print(  "s* is Square? ", s* is Square );
    hide_terminal();
    system("C:/Repos/conan_app_launcher/.venv/Scripts/python.exe -m conan_app_launcher");
}